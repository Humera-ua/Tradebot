import os
import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import openai
import requests

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_USERNAME = os.getenv("OWNER_USERNAME", "humera_ua")
COINGECKO_URL = "https://api.coingecko.com/api/v3/simple/price"

openai.api_key = OPENAI_API_KEY

SUPPORTED_COINS = ["BTC", "ETH", "SOL", "AVAX", "MATIC", "XRP", "DOGE", "OP", "INJ"]

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è ---
async def is_authorized(update: Update):
    username = update.effective_user.username
    if username != OWNER_USERNAME:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ.")
        return False
    return True

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    keyboard = [
        [KeyboardButton("/price BTC"), KeyboardButton("/price ETH")],
        [KeyboardButton("/recommend BTC"), KeyboardButton("/recommend SOL")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    if len(context.args) == 0:
        await update.message.reply_text("–í–∫–∞–∂–∏ –º–æ–Ω–µ—Ç—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /price BTC")
        return
    coin = context.args[0].upper()
    if coin not in SUPPORTED_COINS:
        await update.message.reply_text("–ú–æ–Ω–µ—Ç–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
        return
    try:
        r = requests.get(COINGECKO_URL, params={"ids": coin.lower(), "vs_currencies": "usd"})
        data = r.json()
        price = data[coin.lower()]["usd"]
        await update.message.reply_text(f"üìà {coin}/USDT\nüí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${price}")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω–∏ {coin}/USDT: {str(e)}")

async def recommend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    if len(context.args) == 0:
        await update.message.reply_text("–í–∫–∞–∂–∏ –º–æ–Ω–µ—Ç—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /recommend BTC")
        return
    coin = context.args[0].upper()
    prompt = f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –º–æ–Ω–µ—Ç—É {coin} –¥–ª—è —Ñ'—é—á–µ—Ä—Å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä —â–æ–¥–æ —Ç—Ä–µ–Ω–¥—É, —Ç–æ—á–∫–∏ –≤—Ö–æ–¥—É, TP —ñ SL."

    try:
        completion = openai.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        response = completion.choices[0].message.content
        await update.message.reply_text(f"üìâ GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –¥–ª—è {coin}:\n\n{response}")
    except Exception as e:
        await update.message.reply_text(f"GPT –ø–æ–º–∏–ª–∫–∞: {str(e)}")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("price", price))
    app.add_handler(CommandHandler("recommend", recommend))

    app.run_polling()

if __name__ == "__main__":
    main()
