
import os
import logging
import openai
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_USERNAME = os.getenv("OWNER_USERNAME", "humera_ua")

openai.api_key = OPENAI_API_KEY

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è ---
async def is_authorized(update: Update) -> bool:
    username = update.effective_user.username
    if username != OWNER_USERNAME:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ.")
        return False
    return True

# --- –ö–æ–º–∞–Ω–¥–∏ Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update):
        return
    keyboard = [
        [KeyboardButton("/btc"), KeyboardButton("/recommend btc")],
        [KeyboardButton("/eth"), KeyboardButton("/recommend eth")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –Ø GPT-–±–æ—Ç –¥–ª—è —Ñ'—é—á–µ—Ä—Å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ.", reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update):
        return
    await update.message.reply_text(
        """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
        /start - –∑–∞–ø—É—Å–∫
        /help - –¥–æ–ø–æ–º–æ–≥–∞
        /btc - —Ü—ñ–Ω–∞ BTC
        /recommend btc - –∞–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç–∏
        /eth
        /recommend eth"""
    )
async def btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update):
        return
    try:
        import requests
        response = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd")
        price = response.json()["bitcoin"]["usd"]
        reply = (
            f"üìà *BTC/USDT*\n"
            f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {price:.2f} USDT\n"
            f"–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É - —Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É"
        await update.message.reply_text(reply, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ BTC: {e}")

async def recommend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update):
        return
    if len(context.args) == 0:
        await update.message.reply_text("‚ùó –í–∫–∞–∂–∏ –º–æ–Ω–µ—Ç—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /recommend btc")
        return
    coin = context.args[0].upper()
    prompt = f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –º–æ–Ω–µ—Ç—É {coin} –¥–ª—è —Ñ'—é—á–µ—Ä—Å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ —Ç–æ—á–∫–∏ –∑–æ—Ä—É —Ç—Ä–µ–π–¥–∏–Ω–≥—É."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        gpt_reply = response.choices[0].message["content"]
        await update.message.reply_text(f"üìâ GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –¥–ª—è {coin}:

{gpt_reply}")
    except Exception as e:
        await update.message.reply_text(f"GPT –ø–æ–º–∏–ª–∫–∞: {e}")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("btc", btc))
    app.add_handler(CommandHandler("recommend", recommend))

    app.run_polling()

if __name__ == "__main__":
    main()
