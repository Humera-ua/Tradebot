import os
import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import openai

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_USERNAME = os.getenv("OWNER_USERNAME", "humera_ua")
openai.api_key = OPENAI_API_KEY

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è ---
async def is_authorized(update: Update):
    username = update.effective_user.username
    if username != OWNER_USERNAME:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ.")
        return False
    return True

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    keyboard = [[KeyboardButton("/btc"), KeyboardButton("/eth")],
                [KeyboardButton("/recommend btc"), KeyboardButton("/recommend eth")]]
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è —Ñ'—é—á–µ—Ä—Å–Ω–æ—ó GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.", 
                                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    await update.message.reply_text(
        """üìò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/start ‚Äî –∑–∞–ø—É—Å–∫
/help ‚Äî –¥–æ–ø–æ–º–æ–≥–∞
/btc ‚Äî —Ü—ñ–Ω–∞ BTC
/eth ‚Äî —Ü—ñ–Ω–∞ ETH
/recommend btc ‚Äî –∞–Ω–∞–ª—ñ–∑ BTC
/recommend eth ‚Äî –∞–Ω–∞–ª—ñ–∑ ETH"""
    )

async def btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    # –¢–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ API –±—ñ—Ä–∂—ñ
    price = 65230.55
    reply = f"""üìà *BTC/USDT*
–¶—ñ–Ω–∞: ${price} USD
‚û°Ô∏è –î–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–∞—Ç–∏—Å–Ω–∏ /recommend btc"""
    await update.message.reply_text(reply, parse_mode='Markdown')

async def eth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    price = 3444.55
    reply = f"""üìà *ETH/USDT*
–¶—ñ–Ω–∞: ${price} USD
‚û°Ô∏è –î–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–∞—Ç–∏—Å–Ω–∏ /recommend eth"""
    await update.message.reply_text(reply, parse_mode='Markdown')

async def recommend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    if len(context.args) == 0:
        await update.message.reply_text("‚ùóÔ∏è –í–∫–∞–∂–∏ –º–æ–Ω–µ—Ç—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /recommend btc")
        return
    coin = context.args[0].upper()
    prompt = f"–ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É {coin} –¥–ª—è —Ñ'—é—á–µ—Ä—Å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ. –í–∏–∑–Ω–∞—á –Ω–∞–ø—Ä—è–º —ñ –∫–ª—é—á–æ–≤—ñ —Ä—ñ–≤–Ω—ñ."

    try:
        completion = openai.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        response = completion.choices[0].message.content
    except Exception as e:
        response = f"‚ö†Ô∏è GPT –ø–æ–º–∏–ª–∫–∞: {e}"

    await update.message.reply_text(
        f"""üìâ GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –¥–ª—è {coin}:
        
üí¨ {response}

‚úÖ –°–∏–≥–Ω–∞–ª –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚Äî –≤—Ö—ñ–¥ –º–æ–∂–ª–∏–≤–∏–π.
üéØ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ TP —Ç–∞ SL. –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É.
""", parse_mode='Markdown')

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("btc", btc))
    app.add_handler(CommandHandler("eth", eth))
    app.add_handler(CommandHandler("recommend", recommend))

    app.run_polling()

if __name__ == "__main__":
    main()
