import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import openai

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_USERNAME = os.getenv("OWNER_USERNAME", "humera_ua")
openai.api_key = OPENAI_API_KEY

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è ---
async def is_authorized(update: Update):
    username = update.effective_user.username
    if username != OWNER_USERNAME:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ.")
        return False
    return True

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –Ø GPT-–±–æ—Ç –¥–ª—è —Ñ'—é—á–µ—Ä—Å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    await update.message.reply_text(
        "üìò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start - –∑–∞–ø—É—Å–∫\n"
        "/help - –¥–æ–ø–æ–º–æ–≥–∞\n"
        "/btc - —Ü—ñ–Ω–∞ BTC\n"
        "/eth - —Ü—ñ–Ω–∞ ETH\n"
        "/recommend btc - –∞–Ω–∞–ª—ñ–∑ –º–æ–Ω–µ—Ç–∏"
    )

async def btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    await update.message.reply_text("üìà BTC/USDT\n–¶—ñ–Ω–∞: $XXX (—Ç–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å)")

async def eth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    await update.message.reply_text("üìà ETH/USDT\n–¶—ñ–Ω–∞: $XXX (—Ç–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å)")

async def recommend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_authorized(update): return
    if len(context.args) == 0:
        await update.message.reply_text("–í–∫–∞–∂–∏ –º–æ–Ω–µ—Ç—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /recommend btc")
        return
    symbol = context.args[0].upper()
    prompt = f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ä–∏–Ω–æ–∫ {symbol} –¥–ª—è —Ñ'—é—á–µ—Ä—Å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ."

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        reply = response.choices[0].message.content
    except Exception as e:
        reply = f"‚ö† GPT –ø–æ–º–∏–ª–∫–∞: {e}"

    await update.message.reply_text(
        f"üìâ GPT-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –¥–ª—è {symbol}:\n{reply}"
    )

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("btc", btc))
    app.add_handler(CommandHandler("eth", eth))
    app.add_handler(CommandHandler("recommend", recommend))

    app.run_polling()  # –±–µ–∑ asyncio.run

if __name__ == "_main_":
    main()
